// This is your Prisma schema file

// Define the database connection
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define the Prisma Client generator
generator client {
  provider = "prisma-client-js"
}

// Models
model WaitlistEntry {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String   @unique
  userType  String   // 'customer' or 'provider'
  country   String
  state     String
  city      String
  services  Json?    // Store services as JSON
  createdAt DateTime @default(now())
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  firstName     String
  lastName      String
  userType      String   // 'customer' or 'provider'
  profileImage  String?
  phone         String?
  address       String?
  city          String?
  state         String?
  country       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  serviceListings ServiceListing[]
}

model ServiceListing {
  id              String   @id @default(cuid())
  title           String
  description     String   @db.Text
  category        String
  subcategory     String?
  pricingModel    String   // 'hourly', 'fixed', 'project'
  hourlyRate      Float?
  fixedPrice      Float?
  projectMinPrice Float?
  projectMaxPrice Float?
  duration        String?  // estimated duration
  location        String?
  isPublished     Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  providerId      String
  provider        User     @relation(fields: [providerId], references: [id], onDelete: Cascade)
  images          ServiceImage[]
}

model ServiceImage {
  id        String   @id @default(cuid())
  url       String
  altText   String?
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
  
  // Relations
  serviceListingId String
  serviceListing   ServiceListing @relation(fields: [serviceListingId], references: [id], onDelete: Cascade)
} 